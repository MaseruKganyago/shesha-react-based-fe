/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';
export const SPEC_VERSION = 'v1';
export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface GuidNullableEntityWithDisplayNameDto {
  id?: string | null;
  displayText?: string | null;
}

export interface ReferenceListItemValueDto {
  item?: string | null;
  itemValue?: number | null;
}

export interface ReportingReportDto {
  id?: string;
  reportType?: ReferenceListItemValueDto;
  connectionStringName: string;
  displayName?: string | null;
  description?: string | null;
  category: ReferenceListItemValueDto;
  orderIndex?: number | null;
  visibilityRole?: GuidNullableEntityWithDisplayNameDto;
  cronExpression?: string | null;
  customFilterView?: string | null;
  reportState?: string | null;
  generatedFieldsList?: string | null;
  reportDefinitionXml?: string | null;
  showInReportsMenu?: boolean;
  useCustomParameters?: boolean;
  parameterFormPath?: string | null;
}

export interface ReportingReportDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: ReportingReportDto;
}

export interface ReportingReportDtoPagedResultDto {
  items?: ReportingReportDto[] | null;
  totalCount?: number;
}

export interface ReportingReportDtoPagedResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: ReportingReportDtoPagedResultDto;
}

export interface ReportingReportParameterDto {
  id?: string;
  reportingReport?: GuidNullableEntityWithDisplayNameDto;
  internalName?: string | null;
  type?: ReferenceListItemValueDto;
  displayName?: string | null;
  description?: string | null;
  hideParameter?: boolean;
  parameterValue?: string | null;
  parameterOrderIndex?: number | null;
  dataType?: string | null;
  entityTypeShortAlias?: string | null;
  referenceListName?: string | null;
  referenceListNamespace?: string | null;
  columnName?: string | null;
}

export interface ReportingReportParameterDtoListAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: ReportingReportParameterDto[] | null;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ReportingReportPrepareReportQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ReportingReportPrepareReportProps = Omit<
  MutateProps<void, unknown, ReportingReportPrepareReportQueryParams, void, void>,
  'path' | 'verb'
>;

export const ReportingReportPrepareReport = (props: ReportingReportPrepareReportProps) => (
  <Mutate<void, unknown, ReportingReportPrepareReportQueryParams, void, void>
    verb="POST"
    path={`/api/services/Reporting/ReportingReport/PrepareReport`}
    {...props}
  />
);

export type UseReportingReportPrepareReportProps = Omit<
  UseMutateProps<void, unknown, ReportingReportPrepareReportQueryParams, void, void>,
  'path' | 'verb'
>;

export const useReportingReportPrepareReport = (props: UseReportingReportPrepareReportProps) =>
  useMutate<void, unknown, ReportingReportPrepareReportQueryParams, void, void>(
    'POST',
    `/api/services/Reporting/ReportingReport/PrepareReport`,
    props
  );

export interface ReportingReportGetParametersQueryParams {
  reportId?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ReportingReportGetParametersProps = Omit<
  GetProps<
    ReportingReportParameterDtoListAjaxResponse,
    AjaxResponseBase,
    ReportingReportGetParametersQueryParams,
    void
  >,
  'path'
>;

export const ReportingReportGetParameters = (props: ReportingReportGetParametersProps) => (
  <Get<ReportingReportParameterDtoListAjaxResponse, AjaxResponseBase, ReportingReportGetParametersQueryParams, void>
    path={`/api/services/Reporting/ReportingReport/GetParameters`}
    {...props}
  />
);

export type UseReportingReportGetParametersProps = Omit<
  UseGetProps<
    ReportingReportParameterDtoListAjaxResponse,
    AjaxResponseBase,
    ReportingReportGetParametersQueryParams,
    void
  >,
  'path'
>;

export const useReportingReportGetParameters = (props: UseReportingReportGetParametersProps) =>
  useGet<ReportingReportParameterDtoListAjaxResponse, AjaxResponseBase, ReportingReportGetParametersQueryParams, void>(
    `/api/services/Reporting/ReportingReport/GetParameters`,
    props
  );

export interface ReportingReportGetQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ReportingReportGetProps = Omit<
  GetProps<ReportingReportDtoAjaxResponse, AjaxResponseBase, ReportingReportGetQueryParams, void>,
  'path'
>;

export const ReportingReportGet = (props: ReportingReportGetProps) => (
  <Get<ReportingReportDtoAjaxResponse, AjaxResponseBase, ReportingReportGetQueryParams, void>
    path={`/api/services/Reporting/ReportingReport/Get`}
    {...props}
  />
);

export type UseReportingReportGetProps = Omit<
  UseGetProps<ReportingReportDtoAjaxResponse, AjaxResponseBase, ReportingReportGetQueryParams, void>,
  'path'
>;

export const useReportingReportGet = (props: UseReportingReportGetProps) =>
  useGet<ReportingReportDtoAjaxResponse, AjaxResponseBase, ReportingReportGetQueryParams, void>(
    `/api/services/Reporting/ReportingReport/Get`,
    props
  );

export interface ReportingReportGetAllQueryParams {
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ReportingReportGetAllProps = Omit<
  GetProps<ReportingReportDtoPagedResultDtoAjaxResponse, AjaxResponseBase, ReportingReportGetAllQueryParams, void>,
  'path'
>;

export const ReportingReportGetAll = (props: ReportingReportGetAllProps) => (
  <Get<ReportingReportDtoPagedResultDtoAjaxResponse, AjaxResponseBase, ReportingReportGetAllQueryParams, void>
    path={`/api/services/Reporting/ReportingReport/GetAll`}
    {...props}
  />
);

export type UseReportingReportGetAllProps = Omit<
  UseGetProps<ReportingReportDtoPagedResultDtoAjaxResponse, AjaxResponseBase, ReportingReportGetAllQueryParams, void>,
  'path'
>;

export const useReportingReportGetAll = (props: UseReportingReportGetAllProps) =>
  useGet<ReportingReportDtoPagedResultDtoAjaxResponse, AjaxResponseBase, ReportingReportGetAllQueryParams, void>(
    `/api/services/Reporting/ReportingReport/GetAll`,
    props
  );

export interface ReportingReportCreateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ReportingReportCreateProps = Omit<
  MutateProps<
    ReportingReportDtoAjaxResponse,
    AjaxResponseBase,
    ReportingReportCreateQueryParams,
    ReportingReportDto,
    void
  >,
  'path' | 'verb'
>;

export const ReportingReportCreate = (props: ReportingReportCreateProps) => (
  <Mutate<ReportingReportDtoAjaxResponse, AjaxResponseBase, ReportingReportCreateQueryParams, ReportingReportDto, void>
    verb="POST"
    path={`/api/services/Reporting/ReportingReport/Create`}
    {...props}
  />
);

export type UseReportingReportCreateProps = Omit<
  UseMutateProps<
    ReportingReportDtoAjaxResponse,
    AjaxResponseBase,
    ReportingReportCreateQueryParams,
    ReportingReportDto,
    void
  >,
  'path' | 'verb'
>;

export const useReportingReportCreate = (props: UseReportingReportCreateProps) =>
  useMutate<
    ReportingReportDtoAjaxResponse,
    AjaxResponseBase,
    ReportingReportCreateQueryParams,
    ReportingReportDto,
    void
  >('POST', `/api/services/Reporting/ReportingReport/Create`, props);

export interface ReportingReportUpdateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ReportingReportUpdateProps = Omit<
  MutateProps<
    ReportingReportDtoAjaxResponse,
    AjaxResponseBase,
    ReportingReportUpdateQueryParams,
    ReportingReportDto,
    void
  >,
  'path' | 'verb'
>;

export const ReportingReportUpdate = (props: ReportingReportUpdateProps) => (
  <Mutate<ReportingReportDtoAjaxResponse, AjaxResponseBase, ReportingReportUpdateQueryParams, ReportingReportDto, void>
    verb="PUT"
    path={`/api/services/Reporting/ReportingReport/Update`}
    {...props}
  />
);

export type UseReportingReportUpdateProps = Omit<
  UseMutateProps<
    ReportingReportDtoAjaxResponse,
    AjaxResponseBase,
    ReportingReportUpdateQueryParams,
    ReportingReportDto,
    void
  >,
  'path' | 'verb'
>;

export const useReportingReportUpdate = (props: UseReportingReportUpdateProps) =>
  useMutate<
    ReportingReportDtoAjaxResponse,
    AjaxResponseBase,
    ReportingReportUpdateQueryParams,
    ReportingReportDto,
    void
  >('PUT', `/api/services/Reporting/ReportingReport/Update`, props);

export interface ReportingReportDeleteQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ReportingReportDeleteProps = Omit<
  MutateProps<void, unknown, ReportingReportDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const ReportingReportDelete = (props: ReportingReportDeleteProps) => (
  <Mutate<void, unknown, ReportingReportDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/services/Reporting/ReportingReport/Delete`}
    {...props}
  />
);

export type UseReportingReportDeleteProps = Omit<
  UseMutateProps<void, unknown, ReportingReportDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const useReportingReportDelete = (props: UseReportingReportDeleteProps) =>
  useMutate<void, unknown, ReportingReportDeleteQueryParams, void, void>(
    'DELETE',
    `/api/services/Reporting/ReportingReport/Delete`,
    { ...props }
  );
