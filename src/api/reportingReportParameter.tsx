/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';
export const SPEC_VERSION = 'v1';
export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface GuidNullableEntityWithDisplayNameDto {
  id?: string | null;
  displayText?: string | null;
}

export interface ReferenceListItemValueDto {
  item?: string | null;
  itemValue?: number | null;
}

export interface ReportingReportParameterDto {
  id?: string;
  reportingReport?: GuidNullableEntityWithDisplayNameDto;
  internalName?: string | null;
  type?: ReferenceListItemValueDto;
  displayName?: string | null;
  description?: string | null;
  hideParameter?: boolean;
  parameterValue?: string | null;
  parameterOrderIndex?: number | null;
  dataType?: string | null;
  entityTypeShortAlias?: string | null;
  referenceListName?: string | null;
  referenceListNamespace?: string | null;
  columnName?: string | null;
}

export interface ReportingReportParameterDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: ReportingReportParameterDto;
}

export interface ReportingReportParameterDtoPagedResultDto {
  items?: ReportingReportParameterDto[] | null;
  totalCount?: number;
}

export interface ReportingReportParameterDtoPagedResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: ReportingReportParameterDtoPagedResultDto;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ReportingReportParameterGetQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ReportingReportParameterGetProps = Omit<
  GetProps<ReportingReportParameterDtoAjaxResponse, AjaxResponseBase, ReportingReportParameterGetQueryParams, void>,
  'path'
>;

export const ReportingReportParameterGet = (props: ReportingReportParameterGetProps) => (
  <Get<ReportingReportParameterDtoAjaxResponse, AjaxResponseBase, ReportingReportParameterGetQueryParams, void>
    path={`/api/services/Reporting/ReportingReportParameter/Get`}
    {...props}
  />
);

export type UseReportingReportParameterGetProps = Omit<
  UseGetProps<ReportingReportParameterDtoAjaxResponse, AjaxResponseBase, ReportingReportParameterGetQueryParams, void>,
  'path'
>;

export const useReportingReportParameterGet = (props: UseReportingReportParameterGetProps) =>
  useGet<ReportingReportParameterDtoAjaxResponse, AjaxResponseBase, ReportingReportParameterGetQueryParams, void>(
    `/api/services/Reporting/ReportingReportParameter/Get`,
    props
  );

export interface ReportingReportParameterGetAllQueryParams {
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ReportingReportParameterGetAllProps = Omit<
  GetProps<
    ReportingReportParameterDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    ReportingReportParameterGetAllQueryParams,
    void
  >,
  'path'
>;

export const ReportingReportParameterGetAll = (props: ReportingReportParameterGetAllProps) => (
  <Get<
    ReportingReportParameterDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    ReportingReportParameterGetAllQueryParams,
    void
  >
    path={`/api/services/Reporting/ReportingReportParameter/GetAll`}
    {...props}
  />
);

export type UseReportingReportParameterGetAllProps = Omit<
  UseGetProps<
    ReportingReportParameterDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    ReportingReportParameterGetAllQueryParams,
    void
  >,
  'path'
>;

export const useReportingReportParameterGetAll = (props: UseReportingReportParameterGetAllProps) =>
  useGet<
    ReportingReportParameterDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    ReportingReportParameterGetAllQueryParams,
    void
  >(`/api/services/Reporting/ReportingReportParameter/GetAll`, props);

export interface ReportingReportParameterCreateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ReportingReportParameterCreateProps = Omit<
  MutateProps<
    ReportingReportParameterDtoAjaxResponse,
    AjaxResponseBase,
    ReportingReportParameterCreateQueryParams,
    ReportingReportParameterDto,
    void
  >,
  'path' | 'verb'
>;

export const ReportingReportParameterCreate = (props: ReportingReportParameterCreateProps) => (
  <Mutate<
    ReportingReportParameterDtoAjaxResponse,
    AjaxResponseBase,
    ReportingReportParameterCreateQueryParams,
    ReportingReportParameterDto,
    void
  >
    verb="POST"
    path={`/api/services/Reporting/ReportingReportParameter/Create`}
    {...props}
  />
);

export type UseReportingReportParameterCreateProps = Omit<
  UseMutateProps<
    ReportingReportParameterDtoAjaxResponse,
    AjaxResponseBase,
    ReportingReportParameterCreateQueryParams,
    ReportingReportParameterDto,
    void
  >,
  'path' | 'verb'
>;

export const useReportingReportParameterCreate = (props: UseReportingReportParameterCreateProps) =>
  useMutate<
    ReportingReportParameterDtoAjaxResponse,
    AjaxResponseBase,
    ReportingReportParameterCreateQueryParams,
    ReportingReportParameterDto,
    void
  >('POST', `/api/services/Reporting/ReportingReportParameter/Create`, props);

export interface ReportingReportParameterUpdateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ReportingReportParameterUpdateProps = Omit<
  MutateProps<
    ReportingReportParameterDtoAjaxResponse,
    AjaxResponseBase,
    ReportingReportParameterUpdateQueryParams,
    ReportingReportParameterDto,
    void
  >,
  'path' | 'verb'
>;

export const ReportingReportParameterUpdate = (props: ReportingReportParameterUpdateProps) => (
  <Mutate<
    ReportingReportParameterDtoAjaxResponse,
    AjaxResponseBase,
    ReportingReportParameterUpdateQueryParams,
    ReportingReportParameterDto,
    void
  >
    verb="PUT"
    path={`/api/services/Reporting/ReportingReportParameter/Update`}
    {...props}
  />
);

export type UseReportingReportParameterUpdateProps = Omit<
  UseMutateProps<
    ReportingReportParameterDtoAjaxResponse,
    AjaxResponseBase,
    ReportingReportParameterUpdateQueryParams,
    ReportingReportParameterDto,
    void
  >,
  'path' | 'verb'
>;

export const useReportingReportParameterUpdate = (props: UseReportingReportParameterUpdateProps) =>
  useMutate<
    ReportingReportParameterDtoAjaxResponse,
    AjaxResponseBase,
    ReportingReportParameterUpdateQueryParams,
    ReportingReportParameterDto,
    void
  >('PUT', `/api/services/Reporting/ReportingReportParameter/Update`, props);

export interface ReportingReportParameterDeleteQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ReportingReportParameterDeleteProps = Omit<
  MutateProps<void, unknown, ReportingReportParameterDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const ReportingReportParameterDelete = (props: ReportingReportParameterDeleteProps) => (
  <Mutate<void, unknown, ReportingReportParameterDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/services/Reporting/ReportingReportParameter/Delete`}
    {...props}
  />
);

export type UseReportingReportParameterDeleteProps = Omit<
  UseMutateProps<void, unknown, ReportingReportParameterDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const useReportingReportParameterDelete = (props: UseReportingReportParameterDeleteProps) =>
  useMutate<void, unknown, ReportingReportParameterDeleteQueryParams, void, void>(
    'DELETE',
    `/api/services/Reporting/ReportingReportParameter/Delete`,
    { ...props }
  );
