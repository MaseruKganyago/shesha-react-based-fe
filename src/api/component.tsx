/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';
export const SPEC_VERSION = 'v1';
export interface DynamicDtoComponentGuid {
  id?: string;
  /**
   * List of form fields. Is used for partial updates. Contains a list of entity properties that should be updated. Leave empty to update all available entity fields
   */
  _formFields?: string[];
  isDeleted?: boolean | null;
  area?: string | null;
  name?: string;
  ragGreenThreshold?: number | null;
  indicatorDefinition?: string | null;
  dataSource?: string;
  componentType?: string | null;
  responsibleReporting?: string | null;
  ragCalculationMethod?: number | null;
  responsibleOrganisation?: string | null;
  lastModifierUserId?: number | null;
  lastModificationTime?: string | null;
  predecessor?: string | null;
  orderIndex?: number | null;
  description?: string;
  finalExpenditureTarget?: number | null;
  deleterUserId?: number | null;
  kpiType?: number | null;
  refNo?: string;
  parent?: string | null;
  creatorUserId?: number | null;
  dataLimitations?: string;
  perfIndexWeight?: number | null;
  responsibleQA2?: string | null;
  latestIndicatorValue?: number | null;
  perfIndexCalculationMethod?: number | null;
  creationTime?: string | null;
  finalRAGValue?: number | null;
  indicatorProgressReportingMethod?: number | null;
  ragRedThershold?: number | null;
  responsibleQA1?: string | null;
  performanceReport?: string | null;
  deletionTime?: string | null;
  latestPerfIndex?: number | null;
  latestExpenditureActual?: number | null;
  finalIndicatorTarget?: number | null;
  _meta?: MetaDto;
}

export interface DynamicDtoComponentGuidPagedResultDto {
  items?: DynamicDtoComponentGuid[] | null;
  totalCount?: number;
}

export type JToken = JToken[];

export interface MetaDto {
  className?: string | null;
}

export interface ProxyDynamicDtoComponentGuid {
  id?: string;
  jObject?: {
    [key: string]: JToken;
  } | null;
  isDeleted?: boolean | null;
  area?: string | null;
  name?: string | null;
  ragGreenThreshold?: number | null;
  indicatorDefinition?: string | null;
  dataSource?: string | null;
  componentType?: string | null;
  responsibleReporting?: string | null;
  ragCalculationMethod?: number | null;
  responsibleOrganisation?: string | null;
  lastModifierUserId?: number | null;
  lastModificationTime?: string | null;
  predecessor?: string | null;
  orderIndex?: number | null;
  description?: string | null;
  finalExpenditureTarget?: number | null;
  deleterUserId?: number | null;
  kpiType?: number | null;
  refNo?: string | null;
  parent?: string | null;
  creatorUserId?: number | null;
  dataLimitations?: string | null;
  perfIndexWeight?: number | null;
  responsibleQA2?: string | null;
  latestIndicatorValue?: number | null;
  perfIndexCalculationMethod?: number | null;
  creationTime?: string | null;
  finalRAGValue?: number | null;
  indicatorProgressReportingMethod?: number | null;
  ragRedThershold?: number | null;
  responsibleQA1?: string | null;
  performanceReport?: string | null;
  deletionTime?: string | null;
  latestPerfIndex?: number | null;
  latestExpenditureActual?: number | null;
  finalIndicatorTarget?: number | null;
  _meta?: MetaDto;
}

export interface ComponentGetQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  id?: string;
  'api-version'?: string;
}

export type ComponentGetProps = Omit<GetProps<DynamicDtoComponentGuid, unknown, ComponentGetQueryParams, void>, 'path'>;

export const ComponentGet = (props: ComponentGetProps) => (
  <Get<DynamicDtoComponentGuid, unknown, ComponentGetQueryParams, void>
    path={`/api/services/Epm/Component/Get`}
    {...props}
  />
);

export type UseComponentGetProps = Omit<
  UseGetProps<DynamicDtoComponentGuid, unknown, ComponentGetQueryParams, void>,
  'path'
>;

export const useComponentGet = (props: UseComponentGetProps) =>
  useGet<DynamicDtoComponentGuid, unknown, ComponentGetQueryParams, void>(`/api/services/Epm/Component/Get`, props);

export interface ComponentUpdateGqlQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  'api-version'?: string;
}

export type ComponentUpdateGqlProps = Omit<
  MutateProps<void, unknown, ComponentUpdateGqlQueryParams, DynamicDtoComponentGuid, void>,
  'path' | 'verb'
>;

/**
 * Update entity data.
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const ComponentUpdateGql = (props: ComponentUpdateGqlProps) => (
  <Mutate<void, unknown, ComponentUpdateGqlQueryParams, DynamicDtoComponentGuid, void>
    verb="PUT"
    path={`/api/services/Epm/Component/UpdateGql`}
    {...props}
  />
);

export type UseComponentUpdateGqlProps = Omit<
  UseMutateProps<void, unknown, ComponentUpdateGqlQueryParams, DynamicDtoComponentGuid, void>,
  'path' | 'verb'
>;

/**
 * Update entity data.
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const useComponentUpdateGql = (props: UseComponentUpdateGqlProps) =>
  useMutate<void, unknown, ComponentUpdateGqlQueryParams, DynamicDtoComponentGuid, void>(
    'PUT',
    `/api/services/Epm/Component/UpdateGql`,
    props
  );

export interface ComponentUpdateQueryParams {
  'api-version'?: string;
}

export type ComponentUpdateProps = Omit<
  MutateProps<DynamicDtoComponentGuid, unknown, ComponentUpdateQueryParams, DynamicDtoComponentGuid, void>,
  'path' | 'verb'
>;

export const ComponentUpdate = (props: ComponentUpdateProps) => (
  <Mutate<DynamicDtoComponentGuid, unknown, ComponentUpdateQueryParams, DynamicDtoComponentGuid, void>
    verb="PUT"
    path={`/api/services/Epm/Component/Update`}
    {...props}
  />
);

export type UseComponentUpdateProps = Omit<
  UseMutateProps<DynamicDtoComponentGuid, unknown, ComponentUpdateQueryParams, DynamicDtoComponentGuid, void>,
  'path' | 'verb'
>;

export const useComponentUpdate = (props: UseComponentUpdateProps) =>
  useMutate<DynamicDtoComponentGuid, unknown, ComponentUpdateQueryParams, DynamicDtoComponentGuid, void>(
    'PUT',
    `/api/services/Epm/Component/Update`,
    props
  );

export interface ComponentCreateGqlQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  'api-version'?: string;
}

export type ComponentCreateGqlProps = Omit<
  MutateProps<void, unknown, ComponentCreateGqlQueryParams, DynamicDtoComponentGuid, void>,
  'path' | 'verb'
>;

/**
 * Create entity.
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const ComponentCreateGql = (props: ComponentCreateGqlProps) => (
  <Mutate<void, unknown, ComponentCreateGqlQueryParams, DynamicDtoComponentGuid, void>
    verb="POST"
    path={`/api/services/Epm/Component/CreateGql`}
    {...props}
  />
);

export type UseComponentCreateGqlProps = Omit<
  UseMutateProps<void, unknown, ComponentCreateGqlQueryParams, DynamicDtoComponentGuid, void>,
  'path' | 'verb'
>;

/**
 * Create entity.
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const useComponentCreateGql = (props: UseComponentCreateGqlProps) =>
  useMutate<void, unknown, ComponentCreateGqlQueryParams, DynamicDtoComponentGuid, void>(
    'POST',
    `/api/services/Epm/Component/CreateGql`,
    props
  );

export interface ComponentCreateQueryParams {
  'api-version'?: string;
}

export type ComponentCreateProps = Omit<
  MutateProps<DynamicDtoComponentGuid, unknown, ComponentCreateQueryParams, DynamicDtoComponentGuid, void>,
  'path' | 'verb'
>;

export const ComponentCreate = (props: ComponentCreateProps) => (
  <Mutate<DynamicDtoComponentGuid, unknown, ComponentCreateQueryParams, DynamicDtoComponentGuid, void>
    verb="POST"
    path={`/api/services/Epm/Component/Create`}
    {...props}
  />
);

export type UseComponentCreateProps = Omit<
  UseMutateProps<DynamicDtoComponentGuid, unknown, ComponentCreateQueryParams, DynamicDtoComponentGuid, void>,
  'path' | 'verb'
>;

export const useComponentCreate = (props: UseComponentCreateProps) =>
  useMutate<DynamicDtoComponentGuid, unknown, ComponentCreateQueryParams, DynamicDtoComponentGuid, void>(
    'POST',
    `/api/services/Epm/Component/Create`,
    props
  );

export interface ComponentGetAllQueryParams {
  /**
   * Filter string in JsonLogic format
   */
  filter?: string;
  /**
   * Quick search string. Is used to search entities by text
   */
  quickSearch?: string;
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  'api-version'?: string;
}

export type ComponentGetAllProps = Omit<
  GetProps<DynamicDtoComponentGuidPagedResultDto, unknown, ComponentGetAllQueryParams, void>,
  'path'
>;

export const ComponentGetAll = (props: ComponentGetAllProps) => (
  <Get<DynamicDtoComponentGuidPagedResultDto, unknown, ComponentGetAllQueryParams, void>
    path={`/api/services/Epm/Component/GetAll`}
    {...props}
  />
);

export type UseComponentGetAllProps = Omit<
  UseGetProps<DynamicDtoComponentGuidPagedResultDto, unknown, ComponentGetAllQueryParams, void>,
  'path'
>;

export const useComponentGetAll = (props: UseComponentGetAllProps) =>
  useGet<DynamicDtoComponentGuidPagedResultDto, unknown, ComponentGetAllQueryParams, void>(
    `/api/services/Epm/Component/GetAll`,
    props
  );

export interface ComponentQueryQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  id?: string;
  'api-version'?: string;
}

export type ComponentQueryProps = Omit<GetProps<void, unknown, ComponentQueryQueryParams, void>, 'path'>;

/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const ComponentQuery = (props: ComponentQueryProps) => (
  <Get<void, unknown, ComponentQueryQueryParams, void> path={`/api/services/Epm/Component/Query`} {...props} />
);

export type UseComponentQueryProps = Omit<UseGetProps<void, unknown, ComponentQueryQueryParams, void>, 'path'>;

/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const useComponentQuery = (props: UseComponentQueryProps) =>
  useGet<void, unknown, ComponentQueryQueryParams, void>(`/api/services/Epm/Component/Query`, props);

export interface ComponentQueryAllQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  /**
   * Filter string in JsonLogic format
   */
  filter?: string;
  /**
   * Quick search string. Is used to search entities by text
   */
  quickSearch?: string;
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  'api-version'?: string;
}

export type ComponentQueryAllProps = Omit<GetProps<void, unknown, ComponentQueryAllQueryParams, void>, 'path'>;

/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const ComponentQueryAll = (props: ComponentQueryAllProps) => (
  <Get<void, unknown, ComponentQueryAllQueryParams, void> path={`/api/services/Epm/Component/QueryAll`} {...props} />
);

export type UseComponentQueryAllProps = Omit<UseGetProps<void, unknown, ComponentQueryAllQueryParams, void>, 'path'>;

/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const useComponentQueryAll = (props: UseComponentQueryAllProps) =>
  useGet<void, unknown, ComponentQueryAllQueryParams, void>(`/api/services/Epm/Component/QueryAll`, props);

export interface ComponentDeleteQueryParams {
  id?: string;
  'api-version'?: string;
}

export type ComponentDeleteProps = Omit<
  MutateProps<void, unknown, ComponentDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const ComponentDelete = (props: ComponentDeleteProps) => (
  <Mutate<void, unknown, ComponentDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/services/Epm/Component/Delete`}
    {...props}
  />
);

export type UseComponentDeleteProps = Omit<
  UseMutateProps<void, unknown, ComponentDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const useComponentDelete = (props: UseComponentDeleteProps) =>
  useMutate<void, unknown, ComponentDeleteQueryParams, void, void>('DELETE', `/api/services/Epm/Component/Delete`, {
    ...props,
  });
