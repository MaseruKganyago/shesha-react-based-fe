/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';
export const SPEC_VERSION = 'v1';
export interface DynamicDtoPerformanceReportGuid {
  id?: string;
  /**
   * List of form fields. Is used for partial updates. Contains a list of entity properties that should be updated. Leave empty to update all available entity fields
   */
  _formFields?: string[];
  deletionTime?: string | null;
  creatorUserId?: number | null;
  status?: number | null;
  lastModifierUserId?: number | null;
  deleterUserId?: number | null;
  shortName?: string;
  lastModificationTime?: string | null;
  creationTime?: string | null;
  isDeleted?: boolean | null;
  name?: string;
  periodCovered?: string | null;
  template?: string | null;
  _meta?: MetaDto;
}

export interface DynamicDtoPerformanceReportGuidPagedResultDto {
  items?: DynamicDtoPerformanceReportGuid[] | null;
  totalCount?: number;
}

export type JToken = JToken[];

export interface MetaDto {
  className?: string | null;
}

export interface ProxyDynamicDtoPerformanceReportGuid {
  id?: string;
  jObject?: {
    [key: string]: JToken;
  } | null;
  deletionTime?: string | null;
  creatorUserId?: number | null;
  status?: number | null;
  lastModifierUserId?: number | null;
  deleterUserId?: number | null;
  shortName?: string | null;
  lastModificationTime?: string | null;
  creationTime?: string | null;
  isDeleted?: boolean | null;
  name?: string | null;
  periodCovered?: string | null;
  template?: string | null;
  _meta?: MetaDto;
}

export interface PerformanceReportGetQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  id?: string;
  'api-version'?: string;
}

export type PerformanceReportGetProps = Omit<
  GetProps<DynamicDtoPerformanceReportGuid, unknown, PerformanceReportGetQueryParams, void>,
  'path'
>;

export const PerformanceReportGet = (props: PerformanceReportGetProps) => (
  <Get<DynamicDtoPerformanceReportGuid, unknown, PerformanceReportGetQueryParams, void>
    path={`/api/services/Epm/PerformanceReport/Get`}
    {...props}
  />
);

export type UsePerformanceReportGetProps = Omit<
  UseGetProps<DynamicDtoPerformanceReportGuid, unknown, PerformanceReportGetQueryParams, void>,
  'path'
>;

export const usePerformanceReportGet = (props: UsePerformanceReportGetProps) =>
  useGet<DynamicDtoPerformanceReportGuid, unknown, PerformanceReportGetQueryParams, void>(
    `/api/services/Epm/PerformanceReport/Get`,
    props
  );

export interface PerformanceReportUpdateGqlQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  'api-version'?: string;
}

export type PerformanceReportUpdateGqlProps = Omit<
  MutateProps<void, unknown, PerformanceReportUpdateGqlQueryParams, DynamicDtoPerformanceReportGuid, void>,
  'path' | 'verb'
>;

/**
 * Update entity data.
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const PerformanceReportUpdateGql = (props: PerformanceReportUpdateGqlProps) => (
  <Mutate<void, unknown, PerformanceReportUpdateGqlQueryParams, DynamicDtoPerformanceReportGuid, void>
    verb="PUT"
    path={`/api/services/Epm/PerformanceReport/UpdateGql`}
    {...props}
  />
);

export type UsePerformanceReportUpdateGqlProps = Omit<
  UseMutateProps<void, unknown, PerformanceReportUpdateGqlQueryParams, DynamicDtoPerformanceReportGuid, void>,
  'path' | 'verb'
>;

/**
 * Update entity data.
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const usePerformanceReportUpdateGql = (props: UsePerformanceReportUpdateGqlProps) =>
  useMutate<void, unknown, PerformanceReportUpdateGqlQueryParams, DynamicDtoPerformanceReportGuid, void>(
    'PUT',
    `/api/services/Epm/PerformanceReport/UpdateGql`,
    props
  );

export interface PerformanceReportUpdateQueryParams {
  'api-version'?: string;
}

export type PerformanceReportUpdateProps = Omit<
  MutateProps<
    DynamicDtoPerformanceReportGuid,
    unknown,
    PerformanceReportUpdateQueryParams,
    DynamicDtoPerformanceReportGuid,
    void
  >,
  'path' | 'verb'
>;

export const PerformanceReportUpdate = (props: PerformanceReportUpdateProps) => (
  <Mutate<
    DynamicDtoPerformanceReportGuid,
    unknown,
    PerformanceReportUpdateQueryParams,
    DynamicDtoPerformanceReportGuid,
    void
  >
    verb="PUT"
    path={`/api/services/Epm/PerformanceReport/Update`}
    {...props}
  />
);

export type UsePerformanceReportUpdateProps = Omit<
  UseMutateProps<
    DynamicDtoPerformanceReportGuid,
    unknown,
    PerformanceReportUpdateQueryParams,
    DynamicDtoPerformanceReportGuid,
    void
  >,
  'path' | 'verb'
>;

export const usePerformanceReportUpdate = (props: UsePerformanceReportUpdateProps) =>
  useMutate<
    DynamicDtoPerformanceReportGuid,
    unknown,
    PerformanceReportUpdateQueryParams,
    DynamicDtoPerformanceReportGuid,
    void
  >('PUT', `/api/services/Epm/PerformanceReport/Update`, props);

export interface PerformanceReportCreateGqlQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  'api-version'?: string;
}

export type PerformanceReportCreateGqlProps = Omit<
  MutateProps<void, unknown, PerformanceReportCreateGqlQueryParams, DynamicDtoPerformanceReportGuid, void>,
  'path' | 'verb'
>;

/**
 * Create entity.
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const PerformanceReportCreateGql = (props: PerformanceReportCreateGqlProps) => (
  <Mutate<void, unknown, PerformanceReportCreateGqlQueryParams, DynamicDtoPerformanceReportGuid, void>
    verb="POST"
    path={`/api/services/Epm/PerformanceReport/CreateGql`}
    {...props}
  />
);

export type UsePerformanceReportCreateGqlProps = Omit<
  UseMutateProps<void, unknown, PerformanceReportCreateGqlQueryParams, DynamicDtoPerformanceReportGuid, void>,
  'path' | 'verb'
>;

/**
 * Create entity.
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const usePerformanceReportCreateGql = (props: UsePerformanceReportCreateGqlProps) =>
  useMutate<void, unknown, PerformanceReportCreateGqlQueryParams, DynamicDtoPerformanceReportGuid, void>(
    'POST',
    `/api/services/Epm/PerformanceReport/CreateGql`,
    props
  );

export interface PerformanceReportCreateQueryParams {
  'api-version'?: string;
}

export type PerformanceReportCreateProps = Omit<
  MutateProps<
    DynamicDtoPerformanceReportGuid,
    unknown,
    PerformanceReportCreateQueryParams,
    DynamicDtoPerformanceReportGuid,
    void
  >,
  'path' | 'verb'
>;

export const PerformanceReportCreate = (props: PerformanceReportCreateProps) => (
  <Mutate<
    DynamicDtoPerformanceReportGuid,
    unknown,
    PerformanceReportCreateQueryParams,
    DynamicDtoPerformanceReportGuid,
    void
  >
    verb="POST"
    path={`/api/services/Epm/PerformanceReport/Create`}
    {...props}
  />
);

export type UsePerformanceReportCreateProps = Omit<
  UseMutateProps<
    DynamicDtoPerformanceReportGuid,
    unknown,
    PerformanceReportCreateQueryParams,
    DynamicDtoPerformanceReportGuid,
    void
  >,
  'path' | 'verb'
>;

export const usePerformanceReportCreate = (props: UsePerformanceReportCreateProps) =>
  useMutate<
    DynamicDtoPerformanceReportGuid,
    unknown,
    PerformanceReportCreateQueryParams,
    DynamicDtoPerformanceReportGuid,
    void
  >('POST', `/api/services/Epm/PerformanceReport/Create`, props);

export interface PerformanceReportGetAllQueryParams {
  /**
   * Filter string in JsonLogic format
   */
  filter?: string;
  /**
   * Quick search string. Is used to search entities by text
   */
  quickSearch?: string;
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  'api-version'?: string;
}

export type PerformanceReportGetAllProps = Omit<
  GetProps<DynamicDtoPerformanceReportGuidPagedResultDto, unknown, PerformanceReportGetAllQueryParams, void>,
  'path'
>;

export const PerformanceReportGetAll = (props: PerformanceReportGetAllProps) => (
  <Get<DynamicDtoPerformanceReportGuidPagedResultDto, unknown, PerformanceReportGetAllQueryParams, void>
    path={`/api/services/Epm/PerformanceReport/GetAll`}
    {...props}
  />
);

export type UsePerformanceReportGetAllProps = Omit<
  UseGetProps<DynamicDtoPerformanceReportGuidPagedResultDto, unknown, PerformanceReportGetAllQueryParams, void>,
  'path'
>;

export const usePerformanceReportGetAll = (props: UsePerformanceReportGetAllProps) =>
  useGet<DynamicDtoPerformanceReportGuidPagedResultDto, unknown, PerformanceReportGetAllQueryParams, void>(
    `/api/services/Epm/PerformanceReport/GetAll`,
    props
  );

export interface PerformanceReportQueryQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  id?: string;
  'api-version'?: string;
}

export type PerformanceReportQueryProps = Omit<
  GetProps<void, unknown, PerformanceReportQueryQueryParams, void>,
  'path'
>;

/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const PerformanceReportQuery = (props: PerformanceReportQueryProps) => (
  <Get<void, unknown, PerformanceReportQueryQueryParams, void>
    path={`/api/services/Epm/PerformanceReport/Query`}
    {...props}
  />
);

export type UsePerformanceReportQueryProps = Omit<
  UseGetProps<void, unknown, PerformanceReportQueryQueryParams, void>,
  'path'
>;

/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const usePerformanceReportQuery = (props: UsePerformanceReportQueryProps) =>
  useGet<void, unknown, PerformanceReportQueryQueryParams, void>(`/api/services/Epm/PerformanceReport/Query`, props);

export interface PerformanceReportQueryAllQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  /**
   * Filter string in JsonLogic format
   */
  filter?: string;
  /**
   * Quick search string. Is used to search entities by text
   */
  quickSearch?: string;
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  'api-version'?: string;
}

export type PerformanceReportQueryAllProps = Omit<
  GetProps<void, unknown, PerformanceReportQueryAllQueryParams, void>,
  'path'
>;

/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const PerformanceReportQueryAll = (props: PerformanceReportQueryAllProps) => (
  <Get<void, unknown, PerformanceReportQueryAllQueryParams, void>
    path={`/api/services/Epm/PerformanceReport/QueryAll`}
    {...props}
  />
);

export type UsePerformanceReportQueryAllProps = Omit<
  UseGetProps<void, unknown, PerformanceReportQueryAllQueryParams, void>,
  'path'
>;

/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const usePerformanceReportQueryAll = (props: UsePerformanceReportQueryAllProps) =>
  useGet<void, unknown, PerformanceReportQueryAllQueryParams, void>(
    `/api/services/Epm/PerformanceReport/QueryAll`,
    props
  );

export interface PerformanceReportDeleteQueryParams {
  id?: string;
  'api-version'?: string;
}

export type PerformanceReportDeleteProps = Omit<
  MutateProps<void, unknown, PerformanceReportDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const PerformanceReportDelete = (props: PerformanceReportDeleteProps) => (
  <Mutate<void, unknown, PerformanceReportDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/services/Epm/PerformanceReport/Delete`}
    {...props}
  />
);

export type UsePerformanceReportDeleteProps = Omit<
  UseMutateProps<void, unknown, PerformanceReportDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const usePerformanceReportDelete = (props: UsePerformanceReportDeleteProps) =>
  useMutate<void, unknown, PerformanceReportDeleteQueryParams, void, void>(
    'DELETE',
    `/api/services/Epm/PerformanceReport/Delete`,
    { ...props }
  );
